# Generated by Selenium IDE
import os
import random
import string

from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

from anticaptchaofficial.recaptchav2proxyless import *
from upload import converToArcadj



class TestUntitled():
    def __init__(self, placa, webdrivertipo):
        print("placa", placa)
        print("webdriver", webdrivertipo)
        self.placa = placa
        self.driver = webdriver.Remote(command_executor=webdrivertipo,
                                       desired_capabilities=DesiredCapabilities.CHROME)
        self.wait = WebDriverWait(self.driver, 10)
        self.vars = {}

    def teardown_method(self):
        self.driver.quit()

    def wait_for_window(self, timeout=2):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()

    def randomString(self, stringLength=10):
        """Generate a random string of fixed length """
        letters = string.ascii_lowercase
        return ''.join(random.choice(letters) for i in range(stringLength))

    def leerCapcha(self):
        sitekey = self.driver.find_element(By.CLASS_NAME, "g-recaptcha").get_attribute('data-sitekey')
        print(sitekey)
        getKeyResolv = self.resolvCapcha(sitekey)
        container = self.driver.find_element_by_id("g-recaptcha-response")
        self.driver.execute_script("arguments[0].style.display = 'block';", container)
        self.driver.execute_script(
            "document.getElementById('g-recaptcha-response').innerHTML='{}'".format(getKeyResolv))
        self.driver.execute_script("validarCaptcha();")

    def resolvCapcha(self, sitekey):
        solver = recaptchaV2Proxyless()
        solver.set_verbose(1)
        solver.set_key(os.getenv('KEY_ANTICAPTCHA'))
        solver.set_website_url(
            "https://www.sat.gob.pe/VirtualSAT/principal.aspx?mysession=iu2wkrskIW4unYf%2f0TARUcBrGv81h1Qx4QFN278NwQKkRZSr55Bpew%3d%3d")
        solver.set_website_key(str(sitekey))
        g_response = solver.solve_and_return_solution()
        if g_response != 0:
            print("g-response: " + g_response)
            return g_response
        else:
            print("task finished with error " + solver.error_code)
            return solver.error_code

    def leerPaginacion(self, html):
        print("Paginacion")
        soup = BeautifulSoup(html, 'html.parser')
        data = []
        paginaF = []
        try:
            time.sleep(5)
            # leerMensageVacio = soup.find(id='ctl00_cplPrincipal_lblMensajeVacio').text
            # print(leerMensageVacio)
            table = soup.find('table', attrs={'id': 'ctl00_cplPrincipal_grdEstadoCuenta'})
            print("tabla")
            table_body = table.find('tbody')
            print("tabla1")
            # print("#####################")
            grill = table_body.find_all('tr', attrs={'class': 'grillaPager'})
            print("tabla2")
            if len(grill) == 0:
                print("solo es una pagina")
                return len(grill)
            else:
                for row in grill:
                    cols = row.find_all('td')
                    # print(cols)
                    paginas = [ele.text for ele in cols]
                    print("Paginas por recorrer: {} funcion leerPaginacion".format(len(paginas) - 1))
                    return len(paginas) - 1
        except:
            print("except")
            return "null"

    def leearTablaBeauti(self, paginas):
        print("Paginas por recorrer {} funcion leearTablaBeauti".format(paginas))
        global data
        data = []
        global Arcadjs
        Arcadjs = []

        def leerTabla(html):
            soup = BeautifulSoup(html, 'html.parser')
            print("entrando a tabla leer")
            table = soup.find('table', attrs={'id': 'ctl00_cplPrincipal_grdEstadoCuenta'})
            print("tabla1")
            # print(table)
            table_body = table.find('tbody')
            print("tabla2")
            # print(table_body)
            print("#####################")
            rows = table_body.find_all('tr')
            print("tabla3")
            for row in rows:
                print("tabla4")
                cols = row.find_all('td')
                # print(cols)
                print("tabla5", len(cols))
                if len(cols) == 16:
                    print("tabla6")
                    cols = [ele.text.strip() for ele in cols]
                    l2 = ["nro","placa", "reglamento", "falta", "documentoCodigoPago",
                          "fechaInfracEmision",
                          "importe", "gastCost",
                          "dscto",
                          "totalPagar",
                          "estado",
                          "oculto",
                          "licenciaConducir",
                          "tipoDoc",
                          "documento"
                          ]
                    diccionari = dict(zip(l2, [ele for ele in cols]))
                    print(diccionari)
                    diccionari["deudaATU"] = 0
                    data.append(diccionari)
                    # x = x + 1
                    # print("Valor de X: {}".format(x))
                    # if (x + 1) > 2:
                    #   self.driver.find_element(By.XPATH, "/html/body/form/div[3]/section/div/div/div[2]/div[3]/div/div/div/div/div/table/tbody/tr[12]/td/table/tbody/tr/td['{}']/a".format(x)).click()
                    # else:
                    #   pass
                else:
                    print("No tiene los registros completos")
            # print("Iinfo Por Pagina{}".format(data))
            print("Fin de la Lctura")
            return "Fin de la Lctura"

        if paginas == 0:
            leerTabla(self.driver.page_source)
            return [item for item in data if len(item) > 0]
        else:
            f = 1
            while f < paginas + 1:
                leerTabla(self.driver.page_source)
                f = f + 1
                # time.sleep(3)
                # print("Data actual en data: {}".format(data))
                # carpture = self.randomString()
                # print("Captura guardada como {}".format(carpture))
                # self.driver.save_screenshot("{}.png".format(carpture))
                Arcadjs.append(converToArcadj(self.driver.get_screenshot_as_base64()))
                # input("pagina siguiente antes del click")
                try:
                    print("Antes de dar click", len(data))
                    self.driver.find_element(By.XPATH,
                                             "/html/body/form/div[3]/section/div/div/div[2]/div[8]/div/div/div[1]/div/div/table/tbody/tr[12]/td/table/tbody/tr/td[{}]/a".format(
                                                 f )).click()
                    # print("Souerce de Web", self.driver.page_source)
                    print("click")
                    time.sleep(5)
                    # input("pagina siguiente despues del click")
                except Exception as e:
                    print("No hay mas paginas por recorrer", e)

            return [item for item in data if len(item) > 0]

    def impuestoTotal(self, total):
        global suma
        suma = []
        for elm in total:
            print(elm['totalPagar'])
            suma.append(elm['totalPagar'])
        print(suma)
        redondeo = sum(map(float, suma))
        return '{:06.2f}'.format(redondeo)

    def formatResult(self, resultado):
        # JsonResponse = {
        #     "message" : resultado
        # }
        # self.impuestoTotal(resultado)
        print("Arcas Dj : {}".format(Arcadjs))
        cantidadDeArrglos = len(resultado)
        if cantidadDeArrglos == 0:
            jsonFinal = {
                "codRes": "01",
                # "codigoArchivo": 2433280,
                "codigoArchivo": converToArcadj(self.driver.get_screenshot_as_base64()),
                # "detalles": [
                #     {
                #         "TipoDeFalta": "Muy Graves",
                #         "documentoCodigoPago": "C1123556",
                #         "estado": "Cancelado",
                #         "falta": "R01",
                #         "fechaInfracEmision": "17/08/2016",
                #         "importe": "2100.00",
                #         "licenciaConducir": "Q41097147",
                #         "placa": "AFJ069",
                #         "reglamento": "SET"
                #     }
                # ],
                "detalles": resultado,
                "importeTotal": float(self.impuestoTotal(resultado)),
                "placa": self.placa,
                "created_at": datetime.now()
            }
            # insertarMongo = conexionesMongo.MongoConect(jsonFinal)
            # insertarMongo.InsertarMongoLima()
            # conexionesMongo.InsertarMongoLimaNew(jsonFinal)
            return jsonFinal
        else:
            jsonFinal = {
                "codRes": "00",
                # "codigoArchivo": 2433280,
                "codigoArchivo": converToArcadj(self.driver.get_screenshot_as_base64()),
                # "detalles": [
                #     {
                #         "TipoDeFalta": "Muy Graves",
                #         "documentoCodigoPago": "C1123556",
                #         "estado": "Cancelado",
                #         "falta": "R01",
                #         "fechaInfracEmision": "17/08/2016",
                #         "importe": "2100.00",
                #         "licenciaConducir": "Q41097147",
                #         "placa": "AFJ069",
                #         "reglamento": "SET"
                #     }
                # ],
                "detalles": resultado,
                "importeTotal": float(self.impuestoTotal(resultado)),
                "placa": self.placa,
                "created_at": datetime.now()
            }
            # insertarMongo = conexionesMongo.MongoConect(jsonFinal)
            # insertarMongo.InsertarMongoLima()
            # conexionesMongo.InsertarMongoLimaNew(jsonFinal)
            return jsonFinal

    def test_untitled(self):
        # Test name: Untitled
        # Step # | name | target | value | comment
        # 1 | open | /Websitev9 |  |
        self.driver.get("https://www.sat.gob.pe/Websitev9")
        # 2 | setWindowSize | 1296x1010 |  |
        self.driver.set_window_size(1296, 1010)
        # banner Acceso_ConsultaEnLinea 
        time.sleep(2)
        self.wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'Acceso_ConsultaEnLinea')))
        time.sleep(2)
        self.driver.find_element(By.CLASS_NAME, "Acceso_ConsultaEnLinea").click()
        time.sleep(1)
        window_handles = self.driver.window_handles
        time.sleep(1)
        print("NUEVA PANTALLA")
        self.driver.switch_to.window(window_handles[1])
        print("0")
        time.sleep(2)
        frame_element = self.driver.find_element(By.ID, "fraRightFrame")
        print("1")
        self.driver.switch_to.frame(frame_element)
        print("2")
        time.sleep(1)
        self.driver.find_element(By.XPATH, "/html/body/form/div[2]/section/div/div/div[2]/div[1]/div[2]/div[1]/div[4]/a/img").click()
        print("3")
        # self.driver.find_element(By.ID, "ui-accordion-menu-header-2").click()
        # time.sleep(1)
        # self.driver.find_element(By.ID, "menuOption07").click()
        # time.sleep(1)
        time.sleep(2)
        self.driver.find_element(By.ID, "tipoBusquedaPapeletas").click()

        print("4")
        time.sleep(2)                                        
        self.driver.find_element(By.XPATH, "//*[@id='tipoBusquedaPapeletas']/option[2]").click()
        print("5")
        self.driver.find_element(By.NAME, "ctl00$cplPrincipal$txtPlaca").click()
        # 4 | type | id=txtPlaca | D8L108 |
        self.driver.find_element(By.NAME, "ctl00$cplPrincipal$txtPlaca").send_keys(str(self.placa))
        self.leerCapcha()
        print("2")
        # input("Resuelve Tu la Capcha")
        self.driver.find_element(By.ID, "ctl00_cplPrincipal_CaptchaContinue").click()
        print("3")
        time.sleep(3)
        print("4")
        # print(self.driver.page_source)
        paginasTotales = self.leerPaginacion(self.driver.page_source)
        print("5")
        print("paginasTotales", paginasTotales)
        if paginasTotales == "null":
            try:
                self.wait.until(EC.presence_of_element_located((By.ID, 'ctl00_cplPrincipal_lblMensajeVacio')))
                jsonFinal = {
                    "codRes": "01",
                    # "codigoArchivo": 2433280,
                    "codigoArchivo": converToArcadj(self.driver.get_screenshot_as_base64()),
                    "detalles": [],
                    "importeTotal": 0,
                    "placa": self.placa,
                    "created_at": datetime.now()
                }
                self.teardown_method()
                return jsonFinal
            except:
                jsonFinal = {
                    "codRes": "99",
                    "placa": json['placa'],
                    "detalles": [],
                    "importeTotal": 0,
                    "codigoArchivo": converToArcadj(self.driver.get_screenshot_as_base64()),
                }
                self.teardown_method()
                return jsonFinal
        else:
            lecturaDeTabla = self.leearTablaBeauti(paginasTotales)
            resultado = self.formatResult(lecturaDeTabla)
            # file = open("tabla1paginas.html", "a")
            # file.write(self.driver.page_source)
            # file.close()
            self.teardown_method()
            return resultado

# x = TestUntitled("D8L108")
# x.randomString()
